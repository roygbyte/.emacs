# -*- org-insert-tilde-language: emacs-lisp; -*-

#+begin_src emacs-lisp
      (require 'package)
      ;; :: Add Melpa, Elpa, and local package locations.
      (add-to-list 'package-archives
		   '("melpa" . "http://melpa.org/packages/") t)
      ;;(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
      ;; Local packages are located in a directory called "lisp" which is located in same directory as this file.
      ;;(message (concat (expand-file-name (locate-dominating-file buffer-file-name ".emacs")) "lisp/"))
      (add-to-list 'load-path "/home/scarlett/Development/_Emacs/emacs/lisp/")
      ;;(add-to-list 'load-path "/home/scarlett/.emacs.d/lisp/")
      ;; Require the local packages.
      (require 'awesome-tray)
      (require 'htmlize)
      (require 'web-mode)
      (require 'haskell-unicode-input-method)
      (require 'package)
      ;;(require 'org)
      ;;(require 'ligature)
      (require 'org-bullets)
      (require 'frame-cmds)
      (require 'buffer-move)
      (require 'dired+)
      (require 'smartparens-config)
      (require 'all-the-icons)
      (require 'org-modern)
  (require 'beacon)
  (require 'vulpea)
      ;; :: Initialize packages.
      (package-initialize)
      (unless (package-installed-p 'use-package)
	(package-refresh-contents)
	(package-install 'use-package))
      ;; ========================================
      ;; SECTION ::
      ;; :: Setup autosave directory
      (setq backup-directory-alist
	    `(("." . ,(concat user-emacs-directory "backups"))))

      (setq ring-bell-function 'ignore)

    (require 'epa-file)
  (epa-file-enable)

       ;;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph    
      (defun unfill-paragraph (&optional region)
	"Takes a multi-line paragraph and makes it into a single line of text."
	(interactive (progn (barf-if-buffer-read-only) '(t)))
	(let ((fill-column (point-max))
	      ;; This would override `fill-column' if it's an integer.
	      (emacs-lisp-docstring-fill-column t))
	  (fill-paragraph nil region)))

      ;; Handy key definition
      (define-key global-map "\M-Q" 'unfill-paragraph)

      (load-theme 'doom-1337 t)

      (solaire-global-mode 1)

      ;; SUB SECTION :: Miscellaneous tweaks
      ;; :: Disable splash screen
      (setq inhibit-splash-screen t)
      ;; :: Hide the menubar, scrollbar, toolbar, and modeline
      (toggle-frame-fullscreen)
      (menu-bar-mode -1)
      (scroll-bar-mode -1)
      (tool-bar-mode -1)
      ;; :: Get rid of the scroll bar
      (setq vertical-scroll-bar nil)
      ;; :: Show the fringe on the side of the frame
      (setq-default left-margin-width nil right-margin-width nil)
      (set-window-buffer nil (current-buffer))
      (setq fringes-outside-margins t)
      (window-divider-mode)

      (fringe-mode 1)
      (set-fringe-style '(24 . 12))
      ;;(set-face-attribute 'fringe nil :background nil)
      ;; :: Show Git differences in the fringe
      (global-diff-hl-mode 1)
      (diff-hl-margin-mode)
      (diff-hl-flydiff-mode)
      ;; :: Highlight the active parentheses
      (show-paren-mode 1)
      ;; :: Show line numbbers
      ;; (when (version<= "26.0.50" emacs-version )
      ;;   (global-display-line-numbers-mode)))
      ;;:: Highlight current line
      (global-hl-line-mode 1)
      (set-face-attribute 'hl-line nil
			  :background "#333333")
      ;; :: Remove the time display
      ;;(display-time-mode -1)
      ;; :: Enable transient mark mode
      (transient-mark-mode 1)
      ;; :: Enable icons in dired mode
      ;;(add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
      ;; :: Enable telephone-line-mode, which makes the mode bar fancy.
      (setq telephone-line-lhs
	    '((evil   . (telephone-line-evil-tag-segment))
	      (accent . (telephone-line-vc-segment
			 telephone-line-erc-modified-channels-segment
			 telephone-line-process-segment))
	      (nil    . (telephone-line-minor-mode-segment
			 telephone-line-buffer-segment))))
      (setq telephone-line-rhs
	    '((nil    . (telephone-line-misc-info-segment))
	      (accent . (telephone-line-major-mode-segment))
	      (evil   . (telephone-line-airline-position-segment))))
      (telephone-line-mode 1)
      ;; :: Make delimiters raindow colors
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      (rainbow-delimiters-mode 1)

    ;; :: Add ligatures


      ;;(setq split-height-threshold nil)
      ;;(setq split-width-threshold 80)
      ;; =======================================
      ;; SECTION :: Elisp mode

      ;; (add-hook 'emacs-lisp-mode-hook (lambda ()
      ;;                                   (smartparens-mode)
      ;;                                   (smartparens-strict-mode t)
      ;;                                   )

      ;; =======================================
      ;; SECTION :: Helm Mode
      (helm-mode 1)
      (setq-default helm-M-x-fuzzy-match t)
      (global-set-key "\M-x" 'helm-M-x)
      (global-set-key "\C-c\C-m" 'helm-M-x)
      (global-set-key "\C-x\C-f" 'helm-find-files) ;; replace emacs default finder
      (global-set-key (kbd "C-x b") 'helm-buffers-list)
      ;; Might want to play around with these functions later
      ;; (define-key evil-ex-map "b " 'helm-mini)
      ;; (define-key evil-ex-map "e" 'helm-find-files)
      ;; (require 'helm-projectile)
      ;; (define-key evil-ex-map "g" 'helm-projectile-grep)
      ;; (define-key evil-ex-map "f" 'helm-projectile-find-file)
      ;; =======================================
      ;; SECTION :: Magit Mode
      (remove-hook 'server-switch-hook 'magit-commit-diff)
      (setq magit-refresh-status-buffer nil)
      ;; ========================================
      ;; SECTION :: Python Mode
      (defun my-restart-python-console ()
	"Restart python console before evaluate buffer or region to avoid various uncanny conflicts, like not reloding modules even when they are changed"
	(setq python-shell-completion-native-enable -1)
	(interactive)
	(if (get-buffer "*Python*")
	    (let ((kill-buffer-query-functions nil)) (kill-buffer "*Python*")))
	(run-python)
	(python-shell-send-buffer))
      ;; ========================================
      ;; SECTION :: Desktop Mode
      (desktop-save-mode 1)
      (setq desktop-path '("~/.emacs.d/" "~" "."))
      ;; =========================================


      ;; SECTION :: Haskell Mode

      ;; pretty symbols for haskell
      ;;(load "~/.emacs.d/lisp/emacs-rc-pretty-lambda.el")

      ;; :: Set Pretty Haskell Symbols
      (add-hook 'haskell-mode-hook
		(lambda () (set-input-method "haskell-unicode")))


      ;; ==========================================
      ;; SECTION :: Custom helper functions
      ;; from numlocked on yCombinator
      (defun arrayify (start end quote)
	"Turn strings on newlines into a QUOTEd, comma-separated one-liner."
	(interactive "r\nMQuote: ")
	(let ((insertion
	       (mapconcat
		(lambda (x) (format "%s%s%s" quote x quote))
		(split-string (buffer-substring start end)) ", ")))
	  (delete-region start end)
	  (insert insertion)))

      ;; ==========================================
      ;; SECTION :: Custom key bindings
      ;; :: Setup hotkeys for moving to top/bottom of buffer.
      (global-set-key (kbd "C-<") 'beginning-of-buffer)
      (global-set-key (kbd "C->") 'end-of-buffer)
      ;; :: Enable active buffer switch with arrow keys.
      ;; (when (fboundp 'windmove-default-keybindings)
      ;;   (windmove-default-keybindings))
      ;; (windmove-default-keybindings)
      (global-set-key (kbd "M-<up>") 'windmove-up)
      (global-set-key (kbd "M-<down>") 'windmove-down)
      (global-set-key (kbd "M-<left>") 'windmove-left)
      (global-set-key (kbd "M-<right>") 'windmove-right)

      ;; :: Setup hotkeys for windows scrolling other window.
      ;;(define-key global-map [(meta up)] '(lambda() (interactive) (scroll-other-window -1)))
      ;;(define-key global-map [(meta down)] '(lambda() (interactive) (scroll-other-window 1)))
      ;; :: Enable handy keybind for new line.
      (defun newline-without-break-of-line ()
	(interactive)
	(let ((oldpos (point)))
	  (end-of-line)
	  (newline-and-indent)))
      (global-set-key (kbd "<M-RET>") 'newline-without-break-of-line)

      ;; :: Setup hotkeys to start python console.
      (global-set-key (kbd "C-c C-x C-c") 'my-restart-python-console)
      ;; ==========================================
      ;; SECTION :: The Wasteland
      ;;            Functions not working, or experimental

      ;; :: Dunno?? -*- mode: elisp -*-

      ;; :: Ctl+Shift+Return new line
      (global-set-key (kbd "<C-S-RET>") (lambda ()
					  (interactive)
					  (beginning-of-line)
					  (newline-and-indent)
					  (previous-line)))


      ;; (set-face-background 'vertical-border "#161616")
      ;; (set-face-foreground 'vertical-border (face-background 'vertical-border))

      ;; (defun rag-set-face (frame)
      ;;   "Configure faces on frame creation"
      ;;   (select-frame frame)
      ;;   (if (display-graphic)
      ;;       (progn
      ;;         (when (member "Iosevka" (font-family-list))
      ;;           (progn
      ;;             (set-frame-font "Iosevka" nil t))))))
      ;; (add-hook 'after-make-frame-functions #'rag-set-face)

      ;;set frame font when running emacs normally
      ;; (when (member "Iosevka" (font-family-list))
      ;;   (progn
      ;;     (set-frame-font "Iosevka" nil t)))

      ;; hack for annoying mini buffer thing
      ;; see: http://trey-jackson.blogspot.com/2010/04/emacs-tip-36-abort-minibuffer-when.html
      (defun stop-using-minibuffer ()
	"kill the minibuffer"
	(when (and (>= (recursion-depth) 1) (active-minibuffer-window))
	  (abort-recursive-edit)))

      (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)

      ;; Insert new line below current line
      ;; and move cursor to new line
      ;; it will also indent newline
      ;;(global-set-key (kbd "<C-return>") (lambda ()
      ;;                 (interactive)
      ;;               (end-of-line)
      ;;             (newline-and-indent)))



      ;; Set indents to be 2 by default
      ;;(setq-default indent-tabs-mode t)
      ;;(setq-default tab-width 2)
      ;;(setq indent-line-function 'insert-tab)

      ;; :: Enable EditorConfig Mode
      ;;(editorconfig-mode 1)

      ;; https://www.emacswiki.org/emacs/DesktopMultipleSaveFiles
#+end_src

#+RESULTS:
| stop-using-minibuffer |

* Org

#+begin_src emacs-lisp
  (org-babel-load-file
   (concat user-emacs-directory "org.org"))
#+end_src

* Lua

#+begin_src emacs-lisp
    (org-babel-load-file
   (concat user-emacs-directory "modes/lua.org"))
#+end_src

* Hydra

#+begin_src emacs-lisp
  (org-babel-load-file
   (concat user-emacs-directory "hydras.org"))
#+end_src

* Typograhpy

#+begin_src emacs-lisp
  (org-babel-load-file
   (concat user-emacs-directory "typography.org"))
#+end_src

* UI

#+begin_src emacs-lisp
  (org-babel-load-file
   (concat user-emacs-directory "ui.org"))
#+end_src

