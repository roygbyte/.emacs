# -*- org-insert-tilde-language: emacs-lisp; -*-

* Remove big divider between windows

#+begin_src emacs-lisp
  (window-divider-mode -1)
#+end_src

* Tab bar mode, and adjustments

** Enabled tab bar

#+begin_src emacs-lisp
  (tab-bar-mode 1)
#+end_src

** Remove the load average stat

#+begin_src emacs-lisp
  (setq display-time-default-load-average nil)
#+end_src

** Make the clock fit on one line

How much time have I spent trying to get the time to display properly in my =tab bar=? Too much time. The fix below comes by corteousy of [[https://emacs.stackexchange.com/questions/72087/how-to-move-the-time-and-date-displayed-in-the-tab-bar-a-couple-of-character-to][Emperor Udan]]'s question on StackOverflow. It subtracts a few pixels (=- right, hpos 3)= to make room for the time.

#+begin_src emacs-lisp
  (eval-after-load "tab-bar"
    (defun tab-bar-format-align-right ()
      "Align the rest of tab bar items to the right."
      (let* ((rest (cdr (memq 'tab-bar-format-align-right tab-bar-format)))
             (rest (tab-bar-format-list rest))
             (rest (mapconcat (lambda (item) (nth 2 item)) rest ""))
             (hpos (length rest))
             (str (propertize " " 'display `(space :align-to (- right, hpos 3)))))
        `((align-right menu-item ,str ignore)))))
#+end_src

* Make the cursor blinky

For my own amusement, I like to have the cursor blink through a list of colours. 

#+begin_src emacs-lisp
  (defvar blink-cursor-colors (list  "#92c48f" "#6785c5" "#be369c" "#d9ca65")
    "On each blink the cursor will cycle to the next color in this list.")
  (setq blink-cursor-count 0)
  (defun blink-cursor-timer-function ()
    "Zarza wrote this cyberpunk variant of timer `blink-cursor-timer'. 
      Warning: overwrites original version in `frame.el'.
      This one changes the cursor color on each blink. Define colors in `blink-cursor-colors'."
    (when (not (internal-show-cursor-p))
      (when (>= blink-cursor-count (length blink-cursor-colors))
        (setq blink-cursor-count 0))
      (set-cursor-color (nth blink-cursor-count blink-cursor-colors))
      (setq blink-cursor-count (+ 1 blink-cursor-count))
      )
    (internal-show-cursor nil (not (internal-show-cursor-p)))
    )
    #+END_src
